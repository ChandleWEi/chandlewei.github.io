<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linuxtips | ChandleWEi's Blog]]></title>
  <link href="http://ChandleWEi.github.io/blog/categories/linuxtips/atom.xml" rel="self"/>
  <link href="http://ChandleWEi.github.io/"/>
  <updated>2014-02-17T14:25:01+08:00</updated>
  <id>http://ChandleWEi.github.io/</id>
  <author>
    <name><![CDATA[Chandler Wei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[强制_umount_nfs文件系统]]></title>
    <link href="http://ChandleWEi.github.io/blog/2009/06/22/%E5%BC%BA%E5%88%B6_umount_nfs%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <updated>2009-06-22T00:00:00+08:00</updated>
    <id>http://ChandleWEi.github.io/blog/2009/06/22/强制_umount_nfs文件系统</id>
    <content type="html"><![CDATA[<h3 id="umount-nfs">强制 umount nfs文件系统</h3>

<p>root@ubuntu:/# umount /app/nfs/<br />
umount.nfs: /app/nfs: device is busy<br />
umount.nfs: /app/nfs: device is busy</p>

<p>提示文件系统设置busy<br />
root@ubuntu:/# fuser -km /app/nfs/   先使用这条命令<br />
/data/nfs/:                     8119c<br />
root@ubuntu:/# umount /app/nfs/      在umount 就可以了<br />
<a href="&#109;&#097;&#105;&#108;&#116;&#111;:&#114;&#111;&#111;&#116;&#064;&#117;&#098;&#117;&#110;&#116;&#117;&#058;&#047;">&#114;&#111;&#111;&#116;&#064;&#117;&#098;&#117;&#110;&#116;&#117;&#058;&#047;</a>#</p>

<p> </p>

<p>也可使用 umount -f /app/nfs</p>

<p> </p>

<p>[root@dzxt ~]# fuser<br />
usage: fuser [ -a | -s ] [ -n space ] [ -signal ] [ -kimuv ] name …<br />
             [ - ] [ -n space ] [ -signal ] [ -kimuv ] name …<br />
       fuser -l<br />
       fuser -V</p>

<p>    -a        display unused files too<br />
    -k        kill processes accessing that file<br />
    -i        ask before killing (ignored without -k)<br />
    -l        list signal names<br />
    -m        mounted FS<br />
    -n space search in the specified name space (file, udp, or tcp)<br />
    -s        silent operation<br />
    -signal   send signal instead of SIGKILL<br />
    -u        display user ids<br />
    -v        verbose output<br />
    -V        display version information<br />
    -4        search IPv4 sockets only<br />
    -6        search IPv6 sockets only<br />
    -         reset options</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zz_robin_的_配置_留下了]]></title>
    <link href="http://ChandleWEi.github.io/blog/2009/05/08/zz_robin_%E7%9A%84_%E9%85%8D%E7%BD%AE_%E7%95%99%E4%B8%8B%E4%BA%86/"/>
    <updated>2009-05-08T00:00:00+08:00</updated>
    <id>http://ChandleWEi.github.io/blog/2009/05/08/zz_robin_的_配置_留下了</id>
    <content type="html"><![CDATA[<ol>
  <li>$HTTP[“host”] =~ ”^([a-zA-Z0-9-.]+).java.com$” {  </li>
  <li>  server.document-root = ”/Users/robbin/projects/javaeye3/public”  </li>
  <li>  server.errorfile-prefix = ”/Users/robbin/projects/javaeye3/public/error-“  </li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>  $HTTP[“url”] !~ ”(.(js</td>
          <td>css</td>
          <td>gif</td>
          <td>jpg</td>
          <td>jpeg</td>
          <td>bmp</td>
          <td>png</td>
          <td>ico</td>
          <td>txt</td>
          <td>swf</td>
          <td>mp3</td>
          <td>html</td>
          <td>xml</td>
          <td>htm</td>
          <td>)$)</td>
          <td>/javascripts/</td>
          <td>/stylesheets/</td>
          <td>/images/</td>
          <td>/upload/” {  </td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>    server.error-handler-404 = ”/dispatch.fcgi”  </li>
  <li>    fastcgi.server = (“.fcgi” =&gt;  </li>
  <li>      (  </li>
  <li>        ( ”allow-x-send-file” =&gt; ”enable”,  ”socket”=&gt;”/Users/robbin/projects/lighttpd/javaeye.socket-0”)  </li>
  <li>      )  </li>
  <li>    )  </li>
  <li>  }  </li>
  <li>}   </li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zz_top命令详解]]></title>
    <link href="http://ChandleWEi.github.io/blog/2009/05/07/zz_top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
    <updated>2009-05-07T00:00:00+08:00</updated>
    <id>http://ChandleWEi.github.io/blog/2009/05/07/zz_top命令详解</id>
    <content type="html"><![CDATA[<h2 id="top-httpwwwhiadmincomtop-e591bde4bba4e8a7a3e9878a"><a href="http://www.hiadmin.com/top-%e5%91%bd%e4%bb%a4%e8%a7%a3%e9%87%8a/">top 命令解释</a></h2>

<p>从 <a href="https://www.google.com/reader/view/feed/http%3A%2F%2Fwww.hiadmin.com%2F%3Ffeed%3Drss2">架构研究室</a> 作者：ready</p>

<p>top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。下面详细介绍它的使用方法。</p>

<p>top - 01:06:48 up 1:22, 1 user, load average: 0.06, 0.60, 0.48<br />
Tasks: 29 total, 1 running, 28 sleeping, 0 stopped, 0 zombie<br />
Cpu(s): 0.3% us, 1.0% sy, 0.0% ni, 98.7% id, 0.0% wa, 0.0% hi, 0.0% si<br />
Mem: 191272k total, 173656k used, 17616k free, 22052k buffers<br />
Swap: 192772k total, 0k used, 192772k free, 123988k cached</p>

<p>PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND<br />
1379 root 16 0 7976 2456 1980 S 0.7 1.3 0:11.03 sshd<br />
14704 root 16 0 2128 980 796 R 0.7 0.5 0:02.72 top<br />
1 root 16 0 1992 632 544 S 0.0 0.3 0:00.90 init<br />
2 root 34 19 0 0 0 S 0.0 0.0 0:00.00 ksoftirqd/0<br />
3 root RT 0 0 0 0 S 0.0 0.0 0:00.00 watchdog/0</p>

<p>统计信息区<br />
前五行是系统整体的统计信息。第一行是任务队列信息，同 uptime 命令的执行结果。其内容如下：</p>

<p>01:06:48 当前时间<br />
up 1:22 系统运行时间，格式为时:分<br />
1 user 当前登录用户数<br />
load average: 0.06, 0.60, 0.48 系统负载，即任务队列的平均长度。<br />
三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值。</p>

<p>第二、三行为进程和CPU的信息。当有多个CPU时，这些内容可能会超过两行。内容如下：</p>

<p>Tasks: 29 total 进程总数<br />
1 running 正在运行的进程数<br />
28 sleeping 睡眠的进程数<br />
0 stopped 停止的进程数<br />
0 zombie 僵尸进程数<br />
Cpu(s): 0.3% us 用户空间占用CPU百分比<br />
1.0% sy 内核空间占用CPU百分比<br />
0.0% ni 用户进程空间内改变过优先级的进程占用CPU百分比<br />
98.7% id 空闲CPU百分比<br />
0.0% wa 等待输入输出的CPU时间百分比<br />
0.0% hi<br />
0.0% si</p>

<p>最后两行为内存信息。内容如下：</p>

<p>Mem: 191272k total 物理内存总量<br />
173656k used 使用的物理内存总量<br />
17616k free 空闲内存总量<br />
22052k buffers 用作内核缓存的内存量<br />
Swap: 192772k total 交换区总量<br />
0k used 使用的交换区总量<br />
192772k free 空闲交换区总量<br />
123988k cached 缓冲的交换区总量。<br />
内存中的内容被换出到交换区，而后又被换入到内存，但使用过的交换区尚未被覆盖，<br />
该数值即为这些内容已存在于内存中的交换区的大小。<br />
相应的内存再次被换出时可不必再对交换区写入。</p>

<p>进程信息区<br />
统计信息区域的下方显示了各个进程的详细信息。首先来认识一下各列的含义。</p>

<p>序号 列名 含义<br />
a PID 进程id<br />
b PPID 父进程id<br />
c RUSER Real user name<br />
d UID 进程所有者的用户id<br />
e USER 进程所有者的用户名<br />
f GROUP 进程所有者的组名<br />
g TTY 启动进程的终端名。不是从终端启动的进程则显示为 ?<br />
h PR 优先级<br />
i NI nice值。负值表示高优先级，正值表示低优先级<br />
j P 最后使用的CPU，仅在多CPU环境下有意义<br />
k %CPU 上次更新到现在的CPU时间占用百分比<br />
l TIME 进程使用的CPU时间总计，单位秒<br />
m TIME+ 进程使用的CPU时间总计，单位1/100秒<br />
n %MEM 进程使用的物理内存百分比<br />
o VIRT 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES<br />
p SWAP 进程使用的虚拟内存中，被换出的大小，单位kb。<br />
q RES 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA<br />
r CODE 可执行代码占用的物理内存大小，单位kb<br />
s DATA 可执行代码以外的部分(数据段+栈)占用的物理内存大小，单位kb<br />
t SHR 共享内存大小，单位kb<br />
u nFLT 页面错误次数<br />
v nDRT 最后一次写入到现在，被修改过的页面数。<br />
w S 进程状态。<br />
D=不可中断的睡眠状态<br />
R=运行<br />
S=睡眠<br />
T=跟踪/停止<br />
Z=僵尸进程<br />
x COMMAND 命令名/命令行<br />
y WCHAN 若该进程在睡眠，则显示睡眠中的系统函数名<br />
z Flags 任务标志，参考 sched.h</p>

<p>默认情况下仅显示比较重要的 PID、USER、PR、NI、VIRT、RES、SHR、S、%CPU、%MEM、TIME+、COMMAND 列。可以通过下面的快捷键来更改显示内容。</p>

<p>更改显示内容<br />
通过 f 键可以选择显示的内容。按 f 键之后会显示列的列表，按 a-z 即可显示或隐藏对应的列，最后按回车键确定。</p>

<p>按 o 键可以改变列的显示顺序。按小写的 a-z 可以将相应的列向右移动，而大写的 A-Z 可以将相应的列向左移动。最后按回车键确定。</p>

<p>按大写的 F 或 O 键，然后按 a-z 可以将进程按照相应的列进行排序。而大写的 R 键可以将当前的排序倒转。</p>

<p>命令使用</p>

<p>1． 工具（命令）名称<br />
top<br />
2．工具（命令）作用<br />
显示系统当前的进程和其他状况； top是一个动态显示过程,即可以通过用户按键来不断刷新当前状态.如果在前台执行该命令,它将独占前台,直到用户终止该程序为止. 比较准确的说,top命令提供了实时的对系统处理器的状态监视.它将显示系统中CPU最“敏感”的任务列表.该命令可以按CPU使用.内存使用和执行时间 对任务进行排序；而且该命令的很多特性都可以通过交互式命令或者在个人定制文件中进行设定.<br />
3．环境设置<br />
在Linux下使用。<br />
4．使用方法<br />
4．1使用格式<br />
top [-] [d] [p] [q] [c] [C] [S] [s] [n]<br />
4．2参数说明<br />
d 指定每两次屏幕信息刷新之间的时间间隔。当然用户可以使用s交互命令来改变之。<br />
p 通过指定监控进程ID来仅仅监控某个进程的状态。<br />
q该选项将使top没有任何延迟的进行刷新。如果调用程序有超级用户权限，那么top将以尽可能高的优先级运行。<br />
S 指定累计模式<br />
s 使top命令在安全模式中运行。这将去除交互命令所带来的潜在危险。<br />
i 使top不显示任何闲置或者僵死进程。<br />
c 显示整个命令行而不只是显示命令名<br />
4.3其他<br />
　　下面介绍在top命令执行过程中可以使用的一些交互命令。从使用角度来看，熟练的掌握这些命令比掌握选项还重要一些。这些命令都是单字母的，如果在命令行选项中使用了s选项，则可能其中一些命令会被屏蔽掉。<br />
　　Ctrl+L 擦除并且重写屏幕。<br />
　　h或者? 显示帮助画面，给出一些简短的命令总结说明。<br />
　　k 终止一个进程。系统将提示用户输入需要终止的进程PID，以及需要发送给该进程什么样的信号。一般的终止进程可以使用15信号；如果不能正常结束那就使用信号9强制结束该进程。默认值是信号15。在安全模式中此命令被屏蔽。<br />
　　i 忽略闲置和僵死进程。这是一个开关式命令。<br />
　　q 退出程序。<br />
　　r 重新安排一个进程的优先级别。系统提示用户输入需要改变的进程PID以及需要设置的进程优先级值。输入一个正值将使优先级降低，反之则可以使该进程拥有更高的优先权。默认值是10。<br />
　　S 切换到累计模式。<br />
　　s 改变两次刷新之间的延迟时间。系统将提示用户输入新的时间，单位为s。如果有小数，就换算成m s。输入0值则系统将不断刷新，默认值是5 s。需要注意的是如果设置太小的时间，很可能会引起不断刷新，从而根本来不及看清显示的情况，而且系统负载也会大大增加。<br />
　　f或者F 从当前显示中添加或者删除项目。<br />
　　o或者O 改变显示项目的顺序。<br />
　　l 切换显示平均负载和启动时间信息。<br />
　　m 切换显示内存信息。<br />
　　t 切换显示进程和CPU状态信息。<br />
　　c 切换显示命令名称和完整命令行。<br />
　　M 根据驻留内存大小进行排序。<br />
　　P 根据CPU使用百分比大小进行排序。<br />
　　T 根据时间/累计时间进行排序。<br />
W 将当前设置写入~/.toprc文件中。这是写top配置文件的推荐方法。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell_tips]]></title>
    <link href="http://ChandleWEi.github.io/blog/2009/05/07/shell_tips/"/>
    <updated>2009-05-07T00:00:00+08:00</updated>
    <id>http://ChandleWEi.github.io/blog/2009/05/07/shell_tips</id>
    <content type="html"><![CDATA[<p>find . -name “*.[ch]” -exec grep -i -H “search pharse” {} ;</p>

<p> </p>

<table>
  <tbody>
    <tr>
      <td>lsof -i</td>
      <td>grep -i estab</td>
    </tr>
  </tbody>
</table>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linuxtips]]></title>
    <link href="http://ChandleWEi.github.io/blog/2009/04/28/linuxtips/"/>
    <updated>2009-04-28T00:00:00+08:00</updated>
    <id>http://ChandleWEi.github.io/blog/2009/04/28/linuxtips</id>
    <content type="html"><![CDATA[<table>
  <tbody>
    <tr>
      <td>echo “Hello world”</td>
      <td>base64</td>
    </tr>
  </tbody>
</table>

<p>Encryption with base64</p>

<p>Also works with files:</p>

<p><code>$ cat file</code></p>

<p>Hello world</p>

<p><code>$ base64 file</code></p>

<p>SGVsbG8gd29ybGQK</p>

<p>To decrypt use the -d option:</p>

<p><code>$ echo SGVsbG8gd29ybGQK | base64 -d</code></p>

<p>Hello world</p>

]]></content>
  </entry>
  
</feed>
