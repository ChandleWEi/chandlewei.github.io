<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | ChandleWEi's Blog]]></title>
  <link href="http://ChandleWEi.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://ChandleWEi.github.io/"/>
  <updated>2014-02-27T14:52:12+08:00</updated>
  <id>http://ChandleWEi.github.io/</id>
  <author>
    <name><![CDATA[Chandler Wei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Zz_sed]]></title>
    <link href="http://ChandleWEi.github.io/blog/2009/07/10/zz_sed/"/>
    <updated>2009-07-10T00:00:00+08:00</updated>
    <id>http://ChandleWEi.github.io/blog/2009/07/10/zz_sed</id>
    <content type="html"><![CDATA[<p>比如，要将目录/modules下面所有文件中的zhangsan都修改成lisi，这样做：  </p>

<p>sed -i “s/zhangsan/lisi/g” <code>grep zhangsan -rl /modules</code>  </p>

<p>解释一下：  </p>

<p>-i 表示inplace edit，就地修改文件<br />
-r 表示搜索子目录<br />
-l 表示输出匹配的文件名  </p>

<p>这个命令组合很强大，要注意备份文件。</p>

<p>（1）sed ‘y/1234567890/ABCDEFGHIJ/’ test_sed</p>

<p>sed ‘y/1234567890/ABCDEFGHIJ/’ filename<br />
ABCDEFGHIJ<br />
BCDEFGHIJA<br />
CDEFGHIJAB<br />
DEFGHIJABC<br />
注意变换关系是按两个list的位置对应变换</p>

<p>其中：test_sed的内容是：</p>

<p>1234567890<br />
2345678901<br />
3456789012<br />
4567890123</p>

<p>(2)替换每行所有匹配</p>

<p>sed ‘s/01/Ab/g’ test_sed<br />
1234567890<br />
23456789Ab<br />
3456789Ab2<br />
456789Ab23</p>

<p>注意：第一行的0，1没有分别替换为A,b</p>

<p>删除：d命令</p>

<ul>
  <li></li>
</ul>

<p>$ sed ‘2d’ example—–删除example文件的第二行。</p>

<ul>
  <li></li>
</ul>

<p>$ sed ‘2,$d’ example—–删除example文件的第二行到末尾所有行。</p>

<ul>
  <li></li>
</ul>

<p>$ sed ‘$d’ example—–删除example文件的最后一行。</p>

<ul>
  <li></li>
</ul>

<p>$ sed ‘/test/’d example—–删除example文件所有包含test的行。</p>

<p>替换：s命令</p>

<ul>
  <li></li>
</ul>

<p>$ sed ‘s/test/mytest/g’ example—–在整行范围内把test替换为mytest。如果没有g标记，则只有每行第一个匹配的test被替换成mytest。</p>

<ul>
  <li></li>
</ul>

<p>$ sed -n ‘s/^test/mytest/p’ example—–(-n)选项和p标志一起使用表示只打印那些发生替换的行。也就是说，如果某一行开头的test被替换成mytest，就打印它。</p>

<ul>
  <li></li>
</ul>

<p>$ sed ‘s/^192.168.0.1/&amp;localhost/’ example—–&amp;符号表示替换换字符串中被找到的部份。所有以192.168.0.1开头的行都会被替换成它自已加 localhost，变成192.168.0.1localhost。</p>

<ul>
  <li></li>
</ul>

<p>$ sed -n ‘s/(love)able/1rs/p’ example—–love被标记为1，所有loveable会被替换成lovers，而且替换的行会被打印出来。</p>

<ul>
  <li></li>
</ul>

<p>$ sed ‘s#10#100#g’ example—–不论什么字符，紧跟着s命令的都被认为是新的分隔符，所以，“#”在这里是分隔符，代替了默认的“/”分隔符。表示把所有10替换成100。</p>

<p>选定行的范围：逗号</p>

<ul>
  <li></li>
</ul>

<p>$ sed -n ‘/test/,/check/p’ example—–所有在模板test和check所确定的范围内的行都被打印。</p>

<ul>
  <li></li>
</ul>

<p>$ sed -n ‘5,/^test/p’ example—–打印从第五行开始到第一个包含以test开始的行之间的所有行。</p>

<ul>
  <li></li>
</ul>

<p>$ sed ‘/test/,/check/s/$/sed test/’ example—–对于模板test和west之间的行，每行的末尾用字符串sed test替换。</p>

<p>多点编辑：e命令</p>

<ul>
  <li></li>
</ul>

<p>$ sed -e ‘1,5d’ -e ‘s/test/check/’ example—–(-e)选项允许在同一行里执行多条命令。如例子所示，第一条命令删除1至5行，第二条命令用check替换test。命令的执 行顺序对结果有影响。如果两个命令都是替换命令，那么第一个替换命令将影响第二个替换命令的结果。</p>

<ul>
  <li></li>
</ul>

<p>$ sed –expression=’s/test/check/’ –expression=’/love/d’ example—–一个比-e更好的命令是–expression。它能给sed表达式赋值。</p>

<p>从文件读入：r命令</p>

<ul>
  <li></li>
</ul>

<p>$ sed ‘/test/r file’ example—–file里的内容被读进来，显示在与test匹配的行后面，如果匹配多行，则file的内容将显示在所有匹配行的下面。</p>

<p>写入文件：w命令</p>

<ul>
  <li></li>
</ul>

<p>$ sed -n ‘/test/w file’ example—–在example中所有包含test的行都被写入file里。</p>

<p>追加命令：a命令</p>

<ul>
  <li></li>
</ul>

<p>$ sed ‘/^test/a-–&gt;this is a example’ example&lt;—–‘this is a example’被追加到以test开头的行后面，sed要求命令a后面有一个反斜杠。</p>

<p>插入：i命令</p>

<p>$ sed ‘/test/i\</p>

<p>new line</p>

<p>————————-‘ example</p>

<p>如果test被匹配，则把反斜杠后面的文本插入到匹配行的前面。</p>

<p>下一个：n命令</p>

<ul>
  <li></li>
</ul>

<p>$ sed ‘/test/{ n; s/aa/bb/; }’ example—–如果test被匹配，则移动到匹配行的下一行，替换这一行的aa，变为bb，并打印该行，然后继续。</p>

<p>变形：y命令</p>

<ul>
  <li></li>
</ul>

<p>$ sed ‘1,10y/abcde/ABCDE/’ example—–把1–10行内所有abcde转变为大写，注意，正则表达式元字符不能使用这个命令。</p>

<p>退出：q命令</p>

<ul>
  <li></li>
</ul>

<p>$ sed ‘10q’ example—–打印完第10行后，退出sed。</p>

<p>保持和获取：h命令和G命令</p>

<ul>
  <li></li>
</ul>

<p>$ sed -e ‘/test/h’ -e ‘$G example—–在sed处理文件的时候，每一行都被保存在一个叫模式空间的临时缓冲区中，除非行被删除或者输出被取消，否则所有被处理的行都将 打印在屏幕上。接着模式空间被清空，并存入新的一行等待处理。在这个例子里，匹配test的行被找到后，将存入模式空间，h命令将其复制并存入一个称为保 持缓存区的特殊缓冲区内。第二条语句的意思是，当到达最后一行后，G命令取出保持缓冲区的行，然后把它放回模式空间中，且追加到现在已经存在于模式空间中 的行的末尾。在这个例子中就是追加到最后一行。简单来说，任何包含test的行都被复制并追加到该文件的末尾。</p>

<p>保持和互换：h命令和x命令</p>

<ul>
  <li></li>
</ul>

<p>$ sed -e ‘/test/h’ -e ‘/check/x’ example —–互换模式空间和保持缓冲区的内容。也就是把包含test与check的行互换。</p>

<h2 id="section">7. 脚本</h2>

<p>Sed脚本是一个sed的命令清单，启动Sed时以-f选项引导脚本文件名。Sed对于脚本中输入的命令非常挑剔，在命令的末尾不能有任何空白或文本，如果在一行中有多个命令，要用分号分隔。以#开头的行为注释行，且不能跨行。</p>

<h2 id="section-1">8. 小技巧</h2>

<ul>
  <li></li>
</ul>

<p>在sed的命令行中引用shell变量时要使用双引号，而不是通常所用的单引号。下面是一个根据name变量的内容来删除named.conf文件中zone段的脚本：</p>

<p>name=’zone “localhost”’  
sed “/$name/,/};/d” named.conf</p>

<p>sed -i “s/oldstring/newstring/g” <code>grep oldstring -rl yourdir</code>  </p>

<p>例如：替换/home下所有文件中的www.bcak.com.cn为bcak.com.cn  </p>

<p>sed -i “s/www.bcak.com.cn/bcak.com.cn/g” <code>grep [www.bcak.com.cn](http://www.bcak.com.cn/) -rl /home</code></p>

<p>二、下面这条命令：</p>

<p>perl -pi -e ‘s|ABCD|Linux|g’ <code>find ./ -type f</code><br />
将调用perl执行一条替换命令，把find命令找到的所有文件内容中的ABCD替换为Linux  </p>

<p>find ./ -type f<br />
此命令是显示当前目录下所有的文件  </p>

<table>
  <tbody>
    <tr>
      <td>上面的“s</td>
      <td>ABCD</td>
      <td>Linux</td>
      <td>g”是perl要执行的脚本，即把所有ABCD替换为Linux</td>
    </tr>
    <tr>
      <td>如果不写最后的那个g，“s</td>
      <td>ABCD</td>
      <td>Linux</td>
      <td>”将只替换每一行开头的ABCD</td>
    </tr>
  </tbody>
</table>

<p>当编辑指令(参照[section2.2])在命令列上执行时,其前必须加上选项-e。其命令格式如下:  </p>

<p>sed-e’编辑指令1’-e’编辑指令2’…文件档  </p>

<p>其中,所有编辑指令都紧接在选项-e之後,并置於两个”'”特殊字元间。另外,命令上编辑指令的执行是由  </p>

<p>左而右。  </p>

<p>一般编辑指令不多时,使用者通常直接在命令上执行它们。例如,删除yel.dat内1至10行资料,并将其  </p>

<p>馀文字中的”yellow”字串改成”black”字串。此时,可将编辑指令直接在命令上执行,其命令如下:  </p>

<p>sed-e’1,10d’-e’s/yellow/black/g’yel.dat  </p>

<p>在命令中,编辑指令’1,10d’(解[5])执行删除1至10行资料;编辑指令’s/yellow/black/g’(解[6]),  </p>

<p>“yellow”字串替换(substuite)成”black”字串。  </p>

<p>2.2sed的编辑指令  </p>

<p>sed编辑指令的格式如下:  </p>

<p>[address1[,address2]]function[argument]  </p>

<p>其中,位址参数address1、address2为行数或regularexpression字串,表示所执行编辑的资料行;函数参  </p>

<p>数function[argument]为sed的内定函数,表示执行的编辑动作。  </p>

<p>下面两小节,将仔细介绍位址参数的表示法与有哪些函数参数供选择。  </p>

<p>2.2.1位址(address)参数的表示法  </p>

<p>实际上,位址参数表示法只是将要编辑的资料行,用它们的行数或其中的字串来代替表示它们。下面举几个例子  </p>

<p>说明(指令都以函数参数d(参照[section4.2])为例):  </p>

<p>删除档内第10行资料,则指令为10d。  </p>

<p>删除含有”man”字串的资料行时,则指令为/man/d。  </p>

<p>删除档内第10行到第200行资料,则指令为10,200d。  </p>

<p>删除档内第10行到含”man”字串的资料行,则指令为10,/man/d。  </p>

<p>接下来,以位址参数的内容与其个数两点,完整说明指令中位址参数的表示法(同样也以函数参数d为例)。  </p>

<p>位址参数的内容:  </p>

<p>位址为十进位数字:此数字表示行数。当指令执行时,将对符合此行数的资料执行函数参数指示的编辑动作。例如,  </p>

<p>删除资料档中的第15行资料,则指令为15d(参照[section4.2])。其馀类推,如删除资料档中的第m行资料,则  </p>

<p>指令为md。  </p>

<p>位址为regularexpression(参照[附录A]):  </p>

<p>当资料行中有符合regularexpression所表示的字串时,则执行函数参数指示的编辑动作。另外,在  </p>

<p>regularexpression前後必须加上”/”。例如指令为/t.*t/d,表示删除所有含两”t”字母的资料行。其中,”.”  </p>

<p>表示任意字元;”*“表示其前字元可重任意次,它们结合”.*“表示两”t”字母间的任意字串。  </p>

<p>位址参数的个数:在指令中,当没有位址参数时,表示全部资料行执行函数参数所指示的编辑动作;当只有一位址  </p>

<p>参数时,表示只有符合位址的资料行才编辑;当有两个位址参数,如address1,address2时,表示对资料区执行  </p>

<p>编辑,address1代表起始资料行,address2代表结束资料行。对於上述内容,以下面例子做具说明。  </p>

<p>例如指令为  </p>

<p>d  </p>

<p>其表示删除档内所有资料行。  </p>

<p>例如指令为  </p>

<p>5d  </p>

<p>其表示删除档内第五行资料。  </p>

<p>例如指令为  </p>

<p>1,/apple/d  </p>

<p>其表示删除资料区,由档内第一行至内有”apple”字串的资料行。  </p>

<p>例如指令为  </p>

<p>/apple/,/orange/d  </p>

<p>其表示删除资料区,由档内含有”apple”字串至含有”orange”字串的资料行  </p>

<p>2.2.2有那些函数(function)参数  </p>

<p>下页表中介绍所有sed的函数参数(参照[chapter4])的功能。  </p>

<p>函数参数功能  </p>

<p>:label建立scriptfile内指令互相参考的位置。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cap_init]]></title>
    <link href="http://ChandleWEi.github.io/blog/2009/04/28/cap_init/"/>
    <updated>2009-04-28T00:00:00+08:00</updated>
    <id>http://ChandleWEi.github.io/blog/2009/04/28/cap_init</id>
    <content type="html"><![CDATA[<p>http://www.capify.org/getting-started/basics/</p>

<p>http://www.capify.org/getting-started/from-the-beginning/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zzUnix编程哲学]]></title>
    <link href="http://ChandleWEi.github.io/blog/2009/04/17/zzUnix%E7%BC%96%E7%A8%8B%E5%93%B2%E5%AD%A6/"/>
    <updated>2009-04-17T00:00:00+08:00</updated>
    <id>http://ChandleWEi.github.io/blog/2009/04/17/zzUnix编程哲学</id>
    <content type="html"><![CDATA[<p><a href="http://www.cppblog.com/jinq0123/archive/2007/08/29/UnixPhilosophy.html">Unix编程哲学</a></p>

<p>Unix编程哲学  </p>

<p>参考其它另外三个不同版本的翻译：<br />
* <a href="http://www.china-pub.com/computers/common/info.asp?id=23013">Imperfect C++中文版</a><br />
* <a href="http://www.blogcn.com/user3/hufey/blog/346394.html">心开天籁</a><br />
* <a href="http://blog.csdn.net/swordll80/archive/2006/09/01/1156991.aspx">Unix编程哲学</a>  </p>

<p>1.Rule of Modularity: Write simple parts connected by clean interfaces.  </p>

<p>模块化准则：编写简单的模块，并用清晰的接口连接它们。  </p>

<p>2.Rule of Clarity:Clarity is better than cleverness.  </p>

<p>清晰性准则：清晰胜于机巧。  </p>

<p>3.Rule of Composition: Design programs to be connected to other programs.  </p>

<p>组合准则：设计可以相互连接的程序。  </p>

<p>4.Rule of Separation:Separate policy form mechanism; separate interfaces from engines.  </p>

<p>分离准则：策略同机制分离；接口同引擎分离  </p>

<p>5.Rule of Simplicity: Design for simplicity; add complexity only where you must.  </p>

<p>简单性准则：设计要简单，必要时才添加复杂性。  </p>

<p>6:Rule of Parsimony: Write a big program only when it is clear by demonstration that nothing else will do.  </p>

<p>吝啬准则：除非确无它法，不要编写庞大的程序。  </p>

<p>7:Rule of Transparency: Design for visibility to make inspection and debug going easier.  </p>

<p>透明性准则：设计要直白，使检查和调试更易容。  </p>

<p>8:Rules of Robustness:Robustness is the child of transparency and simplicity.  </p>

<p>健壮性准则：健壮性源自于透明性与简单性。  </p>

<p>9:Rule of Representation:Fold knowledge into data so program logic can be stupid and robust.  </p>

<p>表示准则：数据体现知识，让逻辑单纯而健壮  </p>

<p>10:Rule of  Least Surprise:In interface design, always do the least surprising thing.  </p>

<p>最小惊奇准则：在接口设计中，避免出乎意料。  </p>

<p>11:Rule of Silence: When a program has nothing surprising to say, it should say nothing.  </p>

<p>沉默准则：如果程序没有什么好说的，就应该保持沉默。  </p>

<p>12:Rule of Repair:When you must fail, fail nosily and as soon as possible.  </p>

<p>修复准则：如果注定失败，要尽早，要大声。  </p>

<p>13:Rule of Economy:Programmer time is expensive; conserve it in preference to machine time.  </p>

<p>经济性准则：和机器的时间比较，程序员的时间是更宝贵的。  </p>

<p>14:Rule of Generation:Avoid hand-hacking, write programs to write programs when you can.  </p>

<p>生成准则：避免手工编程，如果可能，编写程序去生成程序。  </p>

<p>15:Rule of Optimization:Prototype before polishing. Get it working before you optimize it.  </p>

<p>优化准则：打磨前先成型，优化前先使它工作。  </p>

<p>16:Rule of Diversity:Distrust all claims for “one true way”.  </p>

<p>多样性准则：不相信“唯一正途”。  </p>

<p>17:Rule of Extensibility:Design for the future, because it will be here sooner than you think.  </p>

<p>扩展性准则：为未来设计，因为它来的比你想得早。  </p>

<p>（转载请注明来源于金庆的专栏）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[压力测试]]></title>
    <link href="http://ChandleWEi.github.io/blog/2009/04/15/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"/>
    <updated>2009-04-15T00:00:00+08:00</updated>
    <id>http://ChandleWEi.github.io/blog/2009/04/15/压力测试</id>
    <content type="html"><![CDATA[<p>Siege：压力模拟/测试工具 作者：车东 发表于：2004-02-13 20:02 最后更新于：2008-04-12 03:04 版权声明：可以任意转载，转载时请务必以超链接形式标明文章原始出处和作者信息及本版权声明。 http://www.chedong.com/blog/archives/000033.html 最早使用的压力测试工具是apache的ab(apache benchmark)，apache ab做重复压力测试不错，但是每次只能测试一个链接，如何测试一组链接（比如从日志中导出的1个小时的日志，做真实压力测试），后来找到了这个： Siege是一个压力测试和评测工具，设计用于WEB开发这评估应用在压力下的承受能力：可以根据配置对一个WEB站点进行多用户的并发访问，记录每个用户所有请求过程的相应时间，并在一定数量的并发访问下重复进行。 SIEGE is an http regressive testing and benchmarking utility. It was designed to let web developers measure the performance of their code under duress, to see how it will stand up to load on the internet. It lets the user hit a webserver with a configurable number of concurrent simulated users. Those users place the webserver “under siege.” The duration of the siege is measured in transactions, the sum of simulated users and the number of times each simulated user repeats the process of hitting the server. Thus 20 concurrent users 50 times is 1000 transactions, the length of the test. 下载/安装 Siege时一个开放源代码项目：http://www.joedog.org 下载： wget ftp://sid.joedog.org/pub/siege/siege-latest.tar.gz 安装： %./configure ; make #make install siege包含了一组压力测试工具： SIEGE (1) Siege是一个HTTP压力测试和评测工具. 使用样例： 任务列表：www.chedong.com.url文件 http://www.chedong.com/tech/ http://www.chedong.com/tech/acdsee.html http://www.chedong.com/tech/ant.html http://www.chedong.com/tech/apache_install.html http://www.chedong.com/tech/awstats.html http://www.chedong.com/tech/cache.html http://www.chedong.com/tech/click.html http://www.chedong.com/tech/cms.html http://www.chedong.com/tech/compress.html http://www.chedong.com/tech/cvs_card.html http://www.chedong.com/tech/default.html http://www.chedong.com/tech/dev.html http://www.chedong.com/tech/gnu.html …. siege -c 20 -r 2 -f www.chedong.com.url 参数说明： -c 20 并发20个用户 -r 2 重复循环2次 -f www.chedong.com.url 任务列表：URL列表 输出样例： ** Siege 2.59 ** Preparing 20 concurrent users for battle. 这次“战斗”准备了20个并发用户 The server is now under siege.. done. 服务在“围攻”测试中： Transactions: 40 hits 完成40次处理 Availability: 100.00 % 成功率 Elapsed time: 7.67 secs 总共用时 Data transferred: 877340 bytes 共数据传输：877340字节 Response time: 1.65 secs 相应用时1.65秒：显示网络连接的速度 Transaction rate: 5.22 trans/sec 平均每秒完成5.22次处理：表示服务器后台处理的速度 Throughput: 114385.92 bytes/sec 平均每秒传送数据：114385.92字节 Concurrency: 8.59 最高并发数 8.59 Successful transactions: 40 成功处理次数 Failed transactions: 0 失败处理次数 注意：由于速度很快，可能会达不到并发速度很高就已经完成。Response time显示的是测试机器和被测试服务器之间网络链接状况。Transaction rate则表示服务器端任务处理的完成速度。 辅助工具： 增量压力测试： 为了方便增量压力测试，siege还包含了一些辅助工具： bombardment (1) 是一个辅助工具：用于按照增量用户压力测试： 使用样例： bombardment urlfile.txt 5 3 4 1 初始化URL列表：urlfile.txt 初始化为：5个用户 每次增加：3个用户 运行：4次 每个客户端之间的延迟为：1秒 输出成CSV格式： siege2csv.pl (1) siege2csv.pl将bombardment的输出变成CSV格式： Time Data Transferred Response Time Transaction Rate Throughput Concurrency Code 200 (note that this is horribly broken.) 242 60.22 603064 0.02 4.02 10014.35 0.08 605 59.98 1507660 0.01 10.09 25136.05 0.12 938 59.98 2337496 0.02 15.64 38971.26 0.26 1157 60 2883244 0.04 19.28 48054.07 0.78 参考： 开源测试工具：http://www.opensourcetesting.org/performance.php 压力测试工具：HammerHead 正在试用中</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memcache_小试验]]></title>
    <link href="http://ChandleWEi.github.io/blog/2009/04/09/memcache_%E5%B0%8F%E8%AF%95%E9%AA%8C/"/>
    <updated>2009-04-09T00:00:00+08:00</updated>
    <id>http://ChandleWEi.github.io/blog/2009/04/09/memcache_小试验</id>
    <content type="html"><![CDATA[<p>~$ telnet localhost 11211<br />
Trying 127.0.0.1…<br />
Connected to localhost.<br />
Escape character is ‘^]’.<br />
set foo 0 0 3<br />
bar<br />
STORED<br />
get foo<br />
VALUE foo 0 3<br />
bar<br />
END  </p>
]]></content>
  </entry>
  
</feed>
