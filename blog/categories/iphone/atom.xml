<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Iphone | ChandleWEi's Blog]]></title>
  <link href="http://ChandleWEi.github.io/blog/categories/iphone/atom.xml" rel="self"/>
  <link href="http://ChandleWEi.github.io/"/>
  <updated>2014-02-17T14:08:06+08:00</updated>
  <id>http://ChandleWEi.github.io/</id>
  <author>
    <name><![CDATA[Chandler Wei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Avplayer]]></title>
    <link href="http://ChandleWEi.github.io/blog/2011/05/24/avplayer/"/>
    <updated>2011-05-24T15:52:00+08:00</updated>
    <id>http://ChandleWEi.github.io/blog/2011/05/24/avplayer</id>
    <content type="html"><![CDATA[<ol>
  <li>AVPlayer can play from AVPlayerItem using AVURLAsset with an iPod library url. The AVAudioPlayer cannot play from an iPod library url.  </li>
  <li></li>
</ol>

<p>AVPlayer has no volume property and requires the use of the system volume setting which can be controlled only by the hardware switch or an MPVolumeView. But you can set the mix volume of AVAudioPlayer.</p>

<ol>
  <li></li>
</ol>

<p>AVPlayer seems to report an incorrect currentTime after seeking. But AVAudioPlayer reports accurately.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Delegation_]]></title>
    <link href="http://ChandleWEi.github.io/blog/2011/05/07/delegation_/"/>
    <updated>2011-05-07T15:35:00+08:00</updated>
    <id>http://ChandleWEi.github.io/blog/2011/05/07/delegation_</id>
    <content type="html"><![CDATA[<p><strong>Delegation is a mechanism by which a host object embeds a weak reference (weak in the sense that it’s a simple pointer reference, unretained) to another object—its delegate—and periodically sends messages to the delegate when it requires its input for a task. </strong></p>

<p><strong>授权是一种主对象将一个比较简单指向的引用嵌入到另一个对象里面，当他需要授权的任务输入的时候会周期性的发送消息给授权</strong></p>

<p><strong> </strong></p>

<p>**The host object is generally an “off-the-shelf” framework object (such as an NSWindow or NSXMLParser object) that is seeking to accomplish something, but can only do so in a generic fashion. The delegate, which is almost always an instance of a custom class, acts in coordination with the host object, supplying  program- specific behavior at certain points in the task ( see Figure 4-3). Thus delegation makes it possible to modify or extend the behavior of another objec<br />
这个主对象基本上就是一个现场的框架对象（类似于NS窗口或者NSXML分析程序对象）来争取完成某项任务，但是这种方式只能在一般性的改变当中实现。授权，就是基本上总是比如一个风格的类在与主对象的协调过程中的动作，代理那些在某种意义上以程序区分的在任务里的行为（详见图表4-3）<br />
Delegation, in the simple sense of one object delegating a task to another object, is a common technique in object-oriented programming. However, Cocoa implements delegation in a unique way. A host class uses a formal protocol or an informal protocol to define an interface that the delegate object may choose to implement. All the methods in the informal protocol are optional, and the formal protocol may declare optional methods, allowing the delegate to implement only some of the methods in the protocol. Before it attempts to send a message to its delegate, the host object determines whether it implements the method (via a respondsToSelector: message) to avoid runtime exceptions. For more on formal and informal protocols, see “Protocols.”<br />
授权，在简单意义上来说，主对象授权一个任务给另外一个对象，就是一个面向对象的程序设计里面的普通技术。然而，Cocoa实现授权是以另外一种独特的方式。一个主类使用一个正式的协议，或者一个非正式的协议去定义一个授权对象可能选择的实现的接口或者界面。所有那些在非正式的协议<br />
Some classes in the Cocoa frameworks also send messages to their data sources. A data source is identical in all respects to a delegate, except that the intent is to provide the host object with data to populate a browser, a table view, or similar user-interface view. A data source, unlike a delegate, may also be required to implement some methods of the protocol.  </p>

<p>Delegation is not a strict implementation of the Decorator pattern. The host (delegating) object does not wrap an instance of the class it wants to extend; indeed, it’s the other way around, in that the delegate is specializing the behavior of the delegating framework class. There is no sharing of interface either, other than the delegation methods declared by the framework class.  </p>

<p>Delegation in Cocoa is also part of the Template Method pattern (“Template Method”).<br />
Uses and Limitations  </p>

<p>Delegation is a common design in the Cocoa frameworks. Many classes in the AppKit and UIKit frameworks send messages to delegates, including NSApplication, UIApplication, UITableView, and several subclasses of NSView. Some classes in the Foundation framework, such as NSXMLParser and NSStream, also maintain delegates. You should always use a class’s delegation mechanism instead of subclassing the class, unless the delegation methods do not allow you to accomplish your goal.  </p>

<p>Although you can dynamically change the delegate, only one object can be a delegate at a time. Thus if you want multiple objects to be informed of a particular program event at the same time, you cannot use delegation. However, you can use the notification mechanism for this purpose. A delegate automatically receives notifications from its delegating framework object as long as the delegate implements one or more of the notification methods declared by the framework class. See the discussion of notifications in the Observer pattern (“Observer”).  </p>

<p>Delegating objects in AppKit do not retain their delegates or data sources. See “Ownership of Delegates, Observers, and Targets” for further information.  </p>

<p>**</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iphone_关键知识点]]></title>
    <link href="http://ChandleWEi.github.io/blog/2011/04/12/iphone_%E5%85%B3%E9%94%AE%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <updated>2011-04-12T17:19:00+08:00</updated>
    <id>http://ChandleWEi.github.io/blog/2011/04/12/iphone_关键知识点</id>
    <content type="html"><![CDATA[<h4 id="general-user-interface-classes">General User-Interface Classes</h4>
<p>For the overall functioning of a user interface, the AppKit provides the following classes:
-  </p>

<p><strong>The global application object</strong>. Every application uses a singleton instance of <code>NSApplication</code> to control the main event loop, keep track of the application’s windows and menus, distribute events to the appropriate objects (that is, itself or one of its windows), set up top-level autorelease pools, and receive notification of application-level events. An <code>NSApplication</code> object has a delegate (an object that you assign) that is notified when the application starts or terminates, is hidden or activated, should open a file selected by the user, and so forth. By setting the <code>NSApplication</code> object’s delegate and implementing the delegate methods, you customize the behavior of your application without having to subclass <code>NSApplication</code> .</p>

<ul>
  <li></li>
</ul>

<p><strong>Windows and views</strong>. The window and view classes, <code>NSWindow</code> and <code>NSView</code> , also inherit from <code>NSResponder</code> , and so are designed to respond to user actions. An <code>NSApplication</code> object maintains a list of <code>NSWindow</code> objects—one for each window belonging to the application—and each <code>NSWindow</code> object maintains a hierarchy of <code>NSView</code> objects. The view hierarchy is used for drawing and handling events within a window. An <code>NSWindow</code> object handles window-level events, distributes other events to its views, and provides a drawing area for its views. An <code>NSWindow</code> object also has a delegate allowing you to customize its behavior.</p>

<p>Beginning with Mac OS X v10.5, the window and view classes of the AppKit support enhanced animation features.</p>

<p><code>NSView</code> is the superclass for all objects displayed in a window. All subclasses implement a drawing method using graphics functions; <code>drawRect:</code> is the primary method you override when creating a new <code>NSView</code> .</p>

<ul>
  <li></li>
</ul>

<p><strong>Controller classes for Cocoa bindings</strong>. The abstract <code>NSController</code> class and its concrete subclasses <code>NSObjectController</code> , <code>NSArrayController</code> , <code>NSDictionaryController</code> , and <code>NSTreeController</code> are part of the implementation of Cocoa bindings. This technology automatically synchronizes the application data stored in objects and the presentation of that data in a user interface. See <a href="http://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/CocoaFundamentals/CocoaDesignPatterns/CocoaDesignPatterns.html#//apple_ref/doc/uid/TP40002974-CH6-SW1">“The Model-View-Controller Design Pattern”</a> for a description of these types of controller objects.</p>

<ul>
  <li></li>
</ul>

<p>** Panels (dialogs)**. The <code>NSPanel</code> class is a subclass of <code>NSWindow</code> that you use to display transient, global, or pressing information. For example, you would use an instance of <code>NSPanel</code> , rather than an instance of <code>NSWindow</code> , to display error messages or to query the user for a response to remarkable or unusual circumstances. The AppKit implements some common dialogs for you such as the Save, Open, and Print dialogs, used to save, open, and print documents. Using these dialogs gives the user a consistent look and feel across applications for common operations.</p>

<ul>
  <li></li>
</ul>

<p>** Menus and cursors**. The <code>NSMenu</code> , <code>NSMenuItem</code> , and <code>NSCursor</code> classes define the look and behavior of the menus and cursors that your application displays to the user.</p>

<ul>
  <li></li>
</ul>

<p><strong>Grouping and scrolling views</strong>. The <code>NSBox</code> , <code>NSScrollView</code> , and <code>NSSplitView</code> classes provide graphic “accessories” to other view objects or collections of views in windows. With the <code>NSBox</code> class, you can group elements in windows and draw a border around the entire group. The <code>NSSplitView</code> class lets you append views vertically or horizontally, apportioning to each view some amount of a common territory; a sliding control bar lets the user redistribute the territory among views. The <code>NSScrollView</code> class and its helper class, <code>NSClipView</code> , provide a scrolling mechanism as well as the graphic objects that let the user initiate and control a scroll. The <code>NSRulerView</code> class allows you to add a ruler and markers to a scroll view.</p>

<ul>
  <li></li>
</ul>

<p>** Table views and outline views**. The <code>NSTableView</code> class displays data in rows and columns. <code>NSTableView</code> is ideal for, but not limited to, displaying database records, where rows correspond to each record and columns contain record attributes. The user can edit individual cells and rearrange the columns. You control the behavior and content of an <code>NSTableView</code> object by setting its delegate and data source objects. Outline views (instances of <code>NSOutlineView</code> , a subclass of <code>NSTableView</code> ) offer another approach to displaying tabular data. With the <code>NSBrowser</code> class you can create an object with which users can display and navigate hierarchical data.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[当IOS_SDK升级到_4.x之后.]]></title>
    <link href="http://ChandleWEi.github.io/blog/2010/09/13/%E5%BD%93IOS_SDK%E5%8D%87%E7%BA%A7%E5%88%B0_4.x%E4%B9%8B%E5%90%8E./"/>
    <updated>2010-09-13T00:00:00+08:00</updated>
    <id>http://ChandleWEi.github.io/blog/2010/09/13/当IOS_SDK升级到_4.x之后.</id>
    <content type="html"><![CDATA[<p>当IOS SDK升级到 4.x之后.<br />
你在测试编译时能够选择的SDK 只有4.x<br />
很多人担心这样3.x环境下的IOS执行这种程序会有问题<br />
所以有人把SDK 3.x复制到xcode目录下来做兼容<br />
其实在真正发布的时候<br />
只在在project属性-&gt;Build-&gt;Deployment-&gt;iPhone Deployment Target里面选择对应的IOS版本即可<br />
  <a href="http://www.hiadmin.com/wp-content/uploads/2010/09/IOS.png"> <img src="http://www.hiadmin.com/wp-content/uploads/2010/09/IOS-300x217.png" alt="" title="IOS" /> </a></p>
]]></content>
  </entry>
  
</feed>
